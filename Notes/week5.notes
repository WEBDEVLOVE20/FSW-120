Fetching data from an API with React:

**App.js**

import React, {Component} from "react"

// https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch
// https://swapi.co/
// https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261

class App extends Component {
    constructor() {
        super()
        this.state = {
            loading: false,
            character: {}
        }
    }
    
    componentDidMount() {
        this.setState({loading: true})
        fetch("https://swapi.co/api/people/1")
            .then(response => response.json())
            .then(data => {
                this.setState({
                    loading: false,
                    character: data
                })
            })
    }
    
    render() {
        const text = this.state.loading ? "loading..." : this.state.character.name
        return (
            <div>
                <p>{text}</p>
            </div>
        )
    }
}

export default App



React Router - BrowserRouter:

**index.js**

import React from "react"
import ReactDOM from "react-dom"
import {BrowserRouter} from "react-router-dom"

import App from "./App"

ReactDOM.render(
    <BrowserRouter>
        <App />
    </BrowserRouter>, 
    document.getElementById("root")
)


React Router - Link:


**App.js**

import React from "react"
import {Link} from "react-router-dom"

function App() {    
    return (
        <div>
            <Link to="/">Home</Link>
            <Link to="/about">About</Link>
        </div>
    )
}

export default App


Switch & Route:

import React from "react"
import {Link, Switch, Route} from "react-router-dom"

import Home from "./Home"
import About from "./About"

function App() {    
    return (
        <div>
            <Link to="/">Home</Link>
            <Link to="/about">About</Link>
            
            <Switch>
                <Route exact path="/">
                    <Home />
                </Route>
                <Route path="/about">
                    <About />
                </Route>
            </Switch>
        </div>
    )
}

export default App


React Router- props passed to routed components:

**index.js**

import React from "react"
import ReactDOM from "react-dom"
import {BrowserRouter as Router} from "react-router-dom"

import App from "./App"

ReactDOM.render(
    <Router>
        <App />
    </Router>, 
    document.getElementById("root")
)


**App.js**

import React from "react"
import {Link, Switch, Route} from "react-router-dom"

import Home from "./Home"
import About from "./About"

function App() {    
    return (
        <div>
            <Link to="/">Home</Link>
            <Link to="/about">About</Link>
            
            <Switch>
                <Route exact path="/"><Home /></Route>
                <Route path="/about" component={About} />
            </Switch>
        </div>
    )
}

export default App

**Home.js**


import React from "react"
import {useLocation, useParams, useHistory, useRouteMatch} from "react-router-dom"

function Home(props) {
    return (
        <h1>Home Page</h1>
    )
}

export default Home

// {
//     history: {
//         length: 32, 
//         action: "POP", 
//         location: {
//             pathname: "/", 
//             search: "", 
//             hash: "", 
//             state: null
//         }, 
//         createHref: createHref(location), 
//         push: push(path, state), 
//         replace: replace(path, state), 
//         go: go(n), 
//         goBack: goBack(), 
//         goForward: goForward(), 
//         block: block(prompt), 
//         listen: listen(listener)
//     }, 
//     location: {
//         pathname: "/", 
//         search: "", 
//         hash: "", 
//         state: null
//     }, 
//     match: {
//         path: "/", 
//         url: "/", 
//         isExact: true, 
//         params: {}
//     }, 
//     staticContext: null
// }


React Router Nested Routes:





#components Folder

**Header.js**

import React from "react"
import {Link} from "react-router-dom"

function Header() {
    return (
        <header>
            <ul>
                <li><Link to="/">Home</Link></li>
                <li><Link to="/profile">Profile</Link></li>
            </ul>
        </header>
    )
}

export default Header


**Footer.js**

import React from "react"

function Footer() {
    return (
        <footer>
            <p className="footer">Â©2020 - Router Technology Group</p>
        </footer>
    )
}

export default Footer

#pages Folder

**Home.js**

import React from "react"

function Home() {
    return (
        <h1>Home Page</h1>
    )
}

export default Home


#pages Folder

**Home.js**

import React from "react"

function Home() {
    return (
        <h1>Home Page</h1>
    )
}

export default Home

#profile Folder under pages Folder

**Info.js**

import React from "react"

function Info() {
    return (
        <section>
            <h1>Profile Info</h1>
            <p>Hello, user! Tons of useful info here...</p>
        </section>
    )
}

export default Info

**Profile.js**


import React from "react"
import {Link, Switch, Route} from "react-router-dom"

import Settings from "./Settings"
import Info from "./Info"

function Profile() {
    return (
        <div>
            <h1>Profile Page</h1>
            <ul>
                <li><Link to="/profile/info">Profile Info</Link></li>
                <li><Link to="/profile/settings">Profile Settings</Link></li>
            </ul>
            
            <Switch>
                <Route path="/profile/info">
                    <Info/>
                </Route>
                <Route path="/profile/settings">
                    <Settings/>
                </Route>
            </Switch>
        </div>
    )
}

export default Profile

**Settings.js**

import React from "react"

function ProfileSettings() {
    return (
        <section>
            <h1>Profile settings</h1>
            <input type="password"/>
            <button>Change</button>
        </section>
    )
}

export default ProfileSettings

React Router useParams:

**index.js**

import React from "react"
import ReactDOM from "react-dom"
import {BrowserRouter as Router} from "react-router-dom"
import App from "./App"

ReactDOM.render(
    <Router>
        <App />
    </Router>, 
    document.getElementById("root")
)

**App.js**

import React from "react"
import Header from "./components/Header"
import Home from "./pages/Home"
import ServicesList from "./pages/services/ServicesList"
import ServiceDetail from "./pages/services/ServiceDetail"

import {Switch, Route} from "react-router-dom"

function App() {    
    return (
        <div>
            <Header />
            
            <Switch>
                <Route exact path="/">
                    <Home />
                </Route>
                <Route exact path="/services" >
                    <ServicesList />
                </Route>
                <Route path="/services/:serviceId" >
                    <ServiceDetail />
                </Route>
            </Switch>
        </div>
    )
}

export default App

#components Folder

**Header.js**

import React from "react"
import {Link} from "react-router-dom"

function Header() {
    return (
        <header>
            <ul>
                <li><Link to="/">Home</Link></li>
                <li><Link to="/services">Services</Link></li>
            </ul>
        </header>
    )
}

export default Header

#pages Folder


**Home.js**

import React from "react"

function Home() {
    return (
        <h1>Home Page</h1>
    )
}

export default Home


#services Folder inside pages Folder

**ServiceDetail.js**

import React from "react"
import {useParams} from "react-router-dom"
import servicesData from "./servicesData"

function ServiceDetail(props) {
    const {serviceId} = useParams()
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
    const thisService = servicesData.find(service => service._id === serviceId)
    
    return (
        <div>
            <h1>Service Detail Page</h1>
            <h3>{thisService.name} - ${thisService.price}</h3>
            <p>{thisService.description}</p>
        </div>
    )
}

export default ServiceDetail


**ServicesList.js**


import React from "react"
import servicesData from "./servicesData"
import {Link} from "react-router-dom"

function ServicesList() {
    const services = servicesData.map(service => (
        <h3 key={service._id}>
            <Link to={`/services/${service._id}`}>{service.name}</Link> - ${service.price}
        </h3>
    ))
    return (
        <div>
            <h1>Services List Page</h1>
            {services}
        </div>
    )
}

export default ServicesList

**servicesData.js**

export default [
    {
        "name": "Lawn Mowing",
        "price": 30,
        "_id": "1",
        "description": "Have a carpet-like lawn without any work."
    },
    {
        "name": "Leaf Raking",
        "price": 50,
        "_id": "2",
        "description": "Remove those pesky dead tree parts from your property."
    },
    {
        "name": "Weeding",
        "price": 50,
        "_id": "3",
        "description": "Don't let the invaders ruin your yard."
    },
    {
        "name": "Sprinkler repair",
        "price": 100,
        "_id": "4",
        "description": "Keep your irrigation system top-notch."
    }
]


React Router useRouteMatch:

**App.js**

import React from "react"
import Header from "./components/Header"
import Footer from "./components/Footer"
import Home from "./pages/Home"
import Profile from "./pages/profile/Profile"

import {Switch, Route} from "react-router-dom"

function App() {    
    return (
        <div>
            <Header />
            
            <Switch>
                <Route exact path="/">
                    <Home />
                </Route>
                <Route path="/profile">
                    <Profile/>
                </Route>
            </Switch>
            
            <Footer />
        </div>
    )
}

export default App



#profile Folder

**Info.js**

import React from "react"

function Info() {
    return (
        <section>
            <h1>Profile Info</h1>
            <p>Hello, user! Tons of useful info here...</p>
        </section>
    )
}

export default Info

**Profile.js**

import React from "react"
import {Link, Switch, Route, useRouteMatch} from "react-router-dom"

import Settings from "./Settings"
import Info from "./Info"

function Profile() {
    const {path, url} = useRouteMatch()
    // https://reacttraining.com/blog/react-router-v5-1/#useroutematch

    return (
        <div>
            <h1>Profile Page</h1>
            <ul>
                <li><Link to={`${url}/info`}>Profile Info</Link></li>
                <li><Link to={`${url}/settings`}>Profile Settings</Link></li>
            </ul>
            
            <Switch>
                <Route path={`${path}/info`}>
                    <Info/>
                </Route>
                <Route path={`${path}/settings`}>
                    <Settings/>
                </Route>
            </Switch>
        </div>
    )
}

export default Profile

**Settings.js**

import React from "react"

function ProfileSettings() {
    return (
        <section>
            <h1>Profile settings</h1>
            <input type="password"/>
            <button>Change</button>
        </section>
    )
}

export default ProfileSettings


React Router useHistory:


**ServiceDetail.js**

import React from "react"
import {useParams, useHistory} from "react-router-dom"

import servicesData from "./servicesData"

function ServiceDetail() {
    const {serviceId} = useParams()
    const history = useHistory()
    const thisService = servicesData.find(service => service._id === serviceId)

    
    function handleClick() {
        console.log("Submitting...")
        setTimeout(() => {
            history.push("/services")
        }, 2000)
        history.replace("")
    }
    
    return (
        <div>
            <h1>Service Detail Page</h1>
            <h3>{thisService.name} - ${thisService.price}</h3>
            <p>{thisService.description}</p>
            <button onClick={handleClick}>Go back to all services</button>
        </div>
    )
}

export default ServiceDetail



React Router useLocation:

**ServicesList.js**

import React from "react"
import {Link, useLocation} from "react-router-dom"

import servicesData from "./servicesData"

function ServicesList() {
    const location = useLocation()
    console.log(location)
    
// {
//     pathname: "/services", 
//     search: "?something=hello&blah=goodbye", 
//     hash: "", 
//     state: null, 
//     key: "qyfp8w"
// }
    const services = servicesData.map(service => (
        <div key={service._id}>
            <h3><Link to={`/services/${service._id}`}>{service.name}</Link> - ${service.price}</h3>
        </div>
    ))
    return (
        <div>
            <h1>Services List Page</h1>
            {services}
        </div>
    )
}

export default ServicesList

# Intro to React Router
# What is a SPA?
React Router is an excellent tool we can use to help us easily turn our React applications into Single Page Applications (SPAs).
In the early days of the web, when you had multiple HTML pages to your web site, you needed to create a new HTML file for every page. If you had elements of your web site you wanted to be consistent across every page (such as a navbar or a footer), you would need to copy/paste the HTML code for that element onto every new page your site had.
Obviously this isn't a very DRY approach to web development. If your site has 100 pages and you needed to make one small content change to your navbar, you would need to make that change to all 100 pages on your website. In client-side applications, the solution to this problem is the Single Page Application!
SPAs structure your web site like a record player - some parts will always remain the same (the player itself, the dial controls, the stylus, etc.) and some parts will be switched out (the record). Don't let the name "Single Page" fool you - you can use the concept of SPAs to create the illusion of multiple pages to the user. In reality, when your application loads, the client learns about all of the other "records" you may want to use depending on where the user navigates to on your site and then switches the individual views out whenever it needs to.
Imagine a simple business website with just a few pages - "Home", "About", and "Contact".
That business will likely want to have a navbar to help the user navigate between these pages, and perhaps a footer that will always be at the bottom of the page. But the main content of the page - the middle part below the navbar and above the footer - will need to switch out based on which "page" you're trying to display.
# How to use React Router
The following assumes you've already got an knowledge of creating React applications using create-react-app (and that you've already done so before trying to follow along with this tutorial).
# Installation
React Router works in both React Web and React Native (mobile) environments. We'll be focusing solely on using it for the web. So first thing, install react-router-dom
npm install react-router-dom
# Setup
React Router comes with a component called <BrowserRouter /> that tells the app which parts you're wanting to allow routing in. For our purposes, we'll want routing to be a part of our entire application, so we want to wrap our rendered <App/> component in the <BrowserRouter/> component. In index.js:
...
import { BrowserRouter } from "react-router-dom";
...
ReactDOM.render(
    <BrowserRouter>
        <App/>
    </BrowserRouter>
, document.getElementById("root"));
# Switching views
Our main <App/> component should be where we lay out how our website is structured. As you saw from the above gif, we want our app to always include a Navbar and a Footer, but for the main content in the middle to be able to switch out. The component that gets rendered in the "main content" section will depend on the URL route. For example, if the user navigates to https://oursite.com/, the <Home/> component should be rendered. If they navigate to https://oursite.com/about, the <About/> component should render in the main content area.
To activate a section of your site that can be switched out, you'll use the <Switch></Switch> component from React Router. The <Switch></Switch> component expects to see nested <Route/> components. <Route/> components expect to have a prop for the path (which is the url path the user is navigating to), and another for the component that should be rendered if the specified path is followed. See below:
...
// Need to import Switch and Route
import { Switch, Route } from "react-router-dom";
// Import the Navbar and Footer, which will always be on the screen:
import Navbar from "./Navbar";
import Footer from "./Footer";
// Also need to import our components representing the 
// different options for the main content of the site
import Home from "./Home";
import About from "./About";
import Contact from "./Contact";
import Services from "./Services";
// Here's the main App component. It doesn't have 
// state, so it can be a stateless functional component:
function App () {
    return (
        <div>
            <Navbar/>  {/*This is outside Switch, so it will always render*/}
            <Switch>
                <Route path="/" component={Home}/>
                <Route path="/about" component={About}/>
                <Route path="/contact" component={Contact}/>
                <Route path="/services" component={Services}/>
            </Switch>
        </div>
    )
}
One quick fix we'll need to make has to do with the way the path prop works - the URL doesn't necessarily need to match the specified path exactly, but instead is considered matched if the current path (whatever is in the URL bar after the base URL of the site) matches the beginning of the specified path. In other words, if we try to navigate to mysite.com/about, the path="/" will match because /about begins with a slash (/).
If we only want a path to render if it matches exactly, we need to add the exact prop to the route. In the above case, it would be enough to just add it to the first <Route/> components, since the other ones are more unique:
...
<Switch>
    <Route exact path="/" component={Home}/>
    <Route path="/about" component={About}/>
    ... etc. (Notice there's no need for `exact` on the /about Route)
</Switch>
...
# Routing users to another view
One major difference you'll need to get used to when using React Router is that you can't simply use anchor (<a>) tags anymore to send people to another route (switch out the view). React Router comes with a component we use in place of anchor tags called Link. In our navbar, where we normally would have a series of <a> tags, we can instead use <Link>:
// Navbar.js
import React from "react";
import { Link } from "react-router-dom";
function Navbar (props) {
    return (
        <div className="nav">
            <Link to="/">Home</Link>
            <Link to="/about">About</Link>
            <Link to="/contact">Contact</Link>
            <Link to="/services">Services</Link>
        </div>
    )
}
export default Navbar;
The to prop tells the component which route path the page should be sent to. Our previously-written Switch (in App.js) will then render the correct, corresponding component based on the correct path in the <Route>.
# Conclusion
React Router is an excellent way to use React to create dynamic single-page applications to display and interact with your data! There are a number of other neat things you can do with React Router, so make sure to check out the official documentation to learn all about it.